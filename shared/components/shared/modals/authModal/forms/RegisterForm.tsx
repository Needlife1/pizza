'use client';

import { FormProvider, useForm } from 'react-hook-form';
import { formRegisterSchema, TFormRegisterValues } from './schemas';
import { zodResolver } from '@hookform/resolvers/zod';
import { FormInput } from '../../../form';
import { Button } from '@/shared/components/ui';
import toast from 'react-hot-toast';
import { registerUser } from '@/app/actions';
import { DialogTitle } from '@radix-ui/react-dialog';
import { signIn } from 'next-auth/react'; 

interface Props {
  onClose?: VoidFunction;
  onClickLogin?: VoidFunction;
}

export const RegisterForm: React.FC<Props> = ({ onClose }) => {
  const form = useForm<TFormRegisterValues>({
    resolver: zodResolver(formRegisterSchema),
    defaultValues: {
      email: '',
      fullName: '',
      password: '',
      confirmPassword: '',
    },
  });

  const onsubmit = async (data: TFormRegisterValues) => {
    try {
      await registerUser({
        email: data.email,
        fullName: data.fullName,
        password: data.password,
      });

      toast.success('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—é –ø–æ—à—Ç—É.', {
        icon: '‚úÖ',
      });

      await signIn('credentials', {
        redirect: true, 
        email: data.email,
        password: data.password,
        callbackUrl: '/', 
      });

      onClose?.();
    } catch (error) {
      console.error('Login error:', error);
      toast.error('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', {
        icon: 'üö´',
      });
    }
  };

  return (
    <FormProvider {...form}>
      <form
        className="flex flex-col gap-5"
        onSubmit={form.handleSubmit(onsubmit)}
      >
        <div className="flex justify-between items-center">
          <div className="mr-2">
            <DialogTitle className="text-[26px] font-bold">
              {'–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'}
            </DialogTitle>
            <p className="text-gray-400">–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω–∏, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è.</p>
          </div>
        </div>

        <FormInput name="email" label="E-Mail" required />
        <FormInput name="fullName" label="–ü–æ–≤–Ω–µ –Ü–º'—è" required />
        <FormInput name="password" label="–ü–∞—Ä–æ–ª—å" type="password" required />
        <FormInput
          name="confirmPassword"
          label="–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–∞—Ä–æ–ª—å"
          type="password"
          required
        />

        <Button
          loading={form.formState.isSubmitting}
          className="h-12 text-base"
          type="submit"
        >
          –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
        </Button>
      </form>
    </FormProvider>
  );
};
